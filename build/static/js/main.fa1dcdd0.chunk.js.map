{"version":3,"sources":["components/Persons.js","components/Notification.js","components/AddForm.js","components/FilterForm.js","services/numbers.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deletePerson","name","number","onClick","id","Persons","persons","map","key","Notification","notification","type","style","color","borderStyle","borderRadius","font","padding","margin","AddForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","FilterForm","newFilter","handleFilterChange","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setNotification","notificationType","setNotificationType","getPersons","numberService","initialPersons","useEffect","console","log","updateNumber","personObject","existingId","find","returnedPerson","notify","catch","error","clear","action","setTimeout","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","newId","ids","Uint32Array","p","sort","reverse","length","window","confirm","concat","finally","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fa1dcdd0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ person, deletePerson }) => {\r\n\r\n    return (\r\n      <li>\r\n      {person.name} {person.number} <button onClick={() => deletePerson(person.id)}>delete</button>    \r\n      </li>\r\n    )\r\n}\r\n  \r\n\r\nconst Persons = ({persons, deletePerson}) => {\r\n    \r\nreturn(\r\n \r\n    <ul>\r\n         {persons.map(person =>\r\n            <Person key={person.id} person={person} deletePerson={deletePerson} />\r\n        )}\r\n    </ul>\r\n)}\r\n\r\n\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Notification = ({ notification, type }) => {\r\n    const successStyle = {\r\n      color: 'green',\r\n      borderStyle: 'solid',      \r\n      font: 40,\r\n      padding: 10,\r\n      margin: 10\r\n    }\r\n  \r\n    const errorStyle = {\r\n      color: 'red',\r\n      borderStyle: 'solid',\r\n      borderRadius: 5,\r\n      font: 40,\r\n      padding: 10,\r\n      margin: 10\r\n    }\r\n\r\n    if (notification === null) {\r\n      return null\r\n    } \r\n    \r\n    if (type === 'error') {\r\n      return (\r\n        <div style={errorStyle}>\r\n          {notification}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div style={successStyle}>\r\n          {notification}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Notification","import React from 'react'\r\n\r\nconst AddForm = (props) => (\r\n\r\n<form onSubmit={props.addPerson}>\r\n        <div>\r\n          <p>                 \r\n          name: \r\n          <input \r\n          value={props.newName}\r\n          onChange={props.handleNameChange}          \r\n          />\r\n          <br></br>       \r\n\r\n          number:      \r\n          <input \r\n          value={props.newNumber}\r\n          onChange={props.handleNumberChange}          \r\n          />          \r\n          </p>\r\n        </div>\r\n\r\n          <button type=\"submit\">add</button>\r\n</form>       \r\n)\r\n\r\nexport default AddForm","import React from 'react'\r\n\r\nconst FilterForm = (props) => (\r\n\r\n<form>\r\n   <div>           \r\n       filter shown with: \r\n       <input\r\n         value={props.newFilter}\r\n         onChange={props.handleFilterChange}                   \r\n       />      \r\n   </div>                      \r\n </form>       \r\n   \r\n)\r\n\r\nexport default FilterForm","\r\nimport axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/persons'\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)  \r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, del }","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport AddForm from './components/AddForm'\nimport FilterForm from './components/FilterForm'\nimport numberService from './services/numbers'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType] = useState()\n\n\n  const getPersons = () => {\n    numberService\n    .getAll()\n    .then(initialPersons => {setPersons(initialPersons)\n    })\n  }\n\n  useEffect(() => {\n    getPersons()\n    console.log('effect')\n\n  }, [])\n  \n\n  const addPerson = (event) => {\n    event.preventDefault()\n    \n    let newId = 0\n    let ids = new Uint32Array(persons.map(p => p.id))\n    ids.sort().reverse();\n  \n    if (ids.length>0){\n      newId = ids[0]+1\n    }\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: newId\n    }\n    \n    const names = persons.map(p => p.name)    \n    if (names.includes(newName, 0)){      \n      if (window.confirm(`${newName} is already in the phonebook, replace the old number with a new one?`)){\n        updateNumber(personObject, newName)\n      }      \n    } else {     \n      numberService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        notify('success', 'add', newName)\n      })\n      .catch(error => {\n        notify('error', 'add', newName)\n        getPersons()\n      })\n    }\n  \n    clear()\n  }\n\n  const updateNumber = (personObject, newName) => {\n    const existingId = persons.find(person => person.name === newName).id\n        numberService\n        .update(existingId, personObject)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== existingId ? person : returnedPerson))          \n          notify('success', 'update', newName)\n        })\n        .catch(error => {\n          notify('error', 'update', newName)\n          getPersons()\n        })\n  }\n  \n  const deletePerson = (id) => {    \n         \n    const name = persons.find(person => person.id === id).name  \n    console.log(name)  \n    \n    if(window.confirm(`Delete ${name}`)) {\n        numberService.del(id)\n            .then(response => {                 \n                setPersons(persons.filter(person => person.id !== id))\n                notify('success', 'delete', name)\n            })\n            .catch(error => {\n              notify('error', 'delete', name)\n              getPersons()\n            })\n            .finally(() => {\n              setPersons(persons.filter(person => person.id !== id))\n          })\n    }    \n   }\n\n\n  const clear = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const notify = (type, action, name) => {\n\n console.log(type)\n console.log(action)\n console.log(name)\n\n    if (type === 'success') {\n      setNotificationType('success')\n      switch (action) {\n        case 'add':\n          setNotification(`Added ${name}`)\n          break;\n        case 'update':\n          setNotification(`Updated ${name}'s number`)\n          break;\n        case 'delete':\n          setNotification(`Deleted ${name}'s number`)\n          break;\n        default:\n      }} else if (action === 'add') {\n          setNotificationType('error')\n          setNotification(`Person validation failed for ${name}. Min length for name / number is 3/8 chrs respectively.`)           \n    } else {\n      setNotificationType('error')\n      setNotification(`Information of ${name} has already been removed from server`)\n    }\n    setTimeout(() => {\n      setNotification(null)\n      setNotificationType(null)\n    }, 5000)\n  }\n\n  const handleFilterChange = (event) => {setNewFilter(event.target.value)}\n  const handleNameChange = (event) => {setNewName(event.target.value)}\n  const handleNumberChange = (event) => {setNewNumber(event.target.value)}\n\n  const personsToShow = newFilter ===\n   '' ? persons : persons.filter(person =>\n     person.name.toLowerCase().includes(newFilter.toLowerCase()))  \n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} type={notificationType} />\n      <FilterForm \n           newFilter={newFilter}\n           handleFilterChange={handleFilterChange}  \n      />\n         \n      <h2>Add new</h2>\n      <AddForm \n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      /> \n\n     <h2>Numbers</h2>\n      <ul>      \n        <Persons persons={personsToShow} deletePerson={deletePerson}/>           \n      </ul>\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}